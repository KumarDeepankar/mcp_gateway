# agentic_assistant/gemini_query_agent/a2a_models.py
import uuid
from datetime import datetime, timezone
from enum import Enum
from typing import List, Dict, Any, Optional, Union, Literal
from pydantic import BaseModel, Field, field_serializer

# A2A Protocol version - aligned with new protocol
A2A_PROTOCOL_VERSION = "1.0"

# New A2A Protocol Models - aligned with chart_tools_agent and agent_interface
class A2ARole(str, Enum):
    USER = "user"
    AGENT = "agent"

class TaskState(str, Enum):
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"

class PartType(str, Enum):
    TEXT = "text"
    FILE = "file"
    DATA = "data"
    IMAGE = "image"
    CHART = "chart"

class A2APart(BaseModel):
    """Base part model for A2A messages and artifacts"""
    type: PartType
    content: Union[str, Dict[str, Any], List[Any], Any]
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)

class A2ATextPart(A2APart):
    """Text content part"""
    type: Literal[PartType.TEXT] = PartType.TEXT
    content: str

class A2ADataPart(A2APart):
    """Data content part"""
    type: Literal[PartType.DATA] = PartType.DATA
    content: Union[Dict[str, Any], List[Any], str]

class A2AChartPart(A2APart):
    """Chart content part"""
    type: Literal[PartType.CHART] = PartType.CHART
    content: Dict[str, Any]

class A2AMessage(BaseModel):
    """A2A Protocol message"""
    role: A2ARole
    parts: List[A2APart]
    timestamp: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)
    
    @field_serializer('timestamp')
    def serialize_timestamp(self, dt: datetime) -> str:
        return dt.isoformat()

class A2AArtifact(BaseModel):
    """A2A Protocol artifact - output generated by agent"""
    artifact_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    artifact_type: str
    parts: List[A2APart]
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    
    @field_serializer('created_at')
    def serialize_created_at(self, dt: datetime) -> str:
        return dt.isoformat()

class A2ASkill(BaseModel):
    """A2A Protocol skill definition"""
    skill_id: str
    name: str
    description: str
    input_schema: Dict[str, Any]
    output_schema: Dict[str, Any]
    examples: Optional[List[Dict[str, Any]]] = None
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)

class A2AAgentCard(BaseModel):
    """A2A Protocol agent card - agent metadata document"""
    agent_id: str
    name: str
    description: str
    version: str
    protocol_version: str = "1.0"
    skills: List[A2ASkill]
    service_endpoint: str
    authentication: Optional[Dict[str, Any]] = None
    rate_limits: Optional[Dict[str, Any]] = None
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    updated_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    
    @field_serializer('created_at')
    def serialize_created_at(self, dt: datetime) -> str:
        return dt.isoformat()
    
    @field_serializer('updated_at')
    def serialize_updated_at(self, dt: datetime) -> str:
        return dt.isoformat()

class A2ATaskRequest(BaseModel):
    """Request to create a new task"""
    skill_id: str
    messages: List[A2AMessage]
    context_id: Optional[str] = None
    webhook_url: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)

class A2ATaskResponse(BaseModel):
    """Response from task creation"""
    task_id: str
    state: TaskState
    estimated_duration: Optional[int] = None
    webhook_url: Optional[str] = None

class A2ATaskStatus(BaseModel):
    """Task status response"""
    task_id: str
    state: TaskState
    messages: List[A2AMessage]
    artifacts: List[A2AArtifact]
    progress: Optional[float] = None
    estimated_remaining: Optional[int] = None
    created_at: datetime
    updated_at: datetime
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)
    
    @field_serializer('created_at')
    def serialize_created_at(self, dt: datetime) -> str:
        return dt.isoformat()
    
    @field_serializer('updated_at')
    def serialize_updated_at(self, dt: datetime) -> str:
        return dt.isoformat()

# Legacy compatibility models for backward compatibility
class A2APerformative(str, Enum):
    QUERY_CAPABILITIES = "QUERY_CAPABILITIES"
    INFORM_CAPABILITIES = "INFORM_CAPABILITIES"
    REQUEST_EXECUTE_TOOL = "REQUEST_EXECUTE_TOOL"
    INFORM_RESULT = "INFORM_RESULT"
    FAILURE_EXECUTION = "FAILURE_EXECUTION"

class A2AAgentMessage(BaseModel):
    message_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    conversation_id: Optional[str] = None
    performative: A2APerformative
    timestamp: str = Field(default_factory=lambda: datetime.now(timezone.utc).isoformat())
    sender_agent_id: str
    receiver_agent_id: str
    tool_id: Optional[str] = None
    protocol_version: str = A2A_PROTOCOL_VERSION
    payload: Optional[Dict[str, Any]] = None
    correlation_id: Optional[str] = None

class A2AClientToolInputSchemaItem(BaseModel):
    name: str
    type: str
    required: bool
    description: Optional[str] = None

class A2AClientToolDefinition(BaseModel):
    tool_id: str
    name: str
    description: Optional[str] = None
    input_schema: Optional[List[A2AClientToolInputSchemaItem]] = Field(default_factory=list)

class A2AChartSpec(BaseModel):
    chart_type: str
    data: List[Dict[str, Any]]
    options: Dict[str, Any]
    metadata: Optional[Dict[str, Any]] = None

class A2AMultiChartResponse(BaseModel):
    chart_options: List[A2AChartSpec]

class A2AErrorPayload(BaseModel):
    error_code: str
    error_message: str
    detail: Optional[Dict[str, Any]] = None